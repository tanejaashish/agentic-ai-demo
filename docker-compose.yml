#version: '3.8'

services:
  # Ollama for running LLM locally - FIXED: Added command to pull model
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 8G
    networks:
      - agentic-network
    command: serve
    #>
    #  sh -c "
    #    echo 'Pulling Ollama model...' &&
    #    ollama pull llama3.2:3b || true &&
    #    /bin/ollama serve
    #  "

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for event streaming and caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    environment:
      # Add Postgres ENVs to match the postgres service and fix DB connection
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=agentic
      - POSTGRES_USER=agentic
      - POSTGRES_PASSWORD=agentic123
      - OLLAMA_HOST=http://ollama:11434
      - CHROMA_HOST=http://chromadb:8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      - ollama
      - chromadb
      - redis
      - postgres
    networks:
      - agentic-network
    command: >
      sh -c "
        echo 'Waiting for services...' &&
        sleep 45 &&
        echo 'Initializing data...' &&
        python /app/scripts/init_data.py &&
        echo 'Starting server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend Web Interface - FIXED: Reverted URL to use internal Docker hostname
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000  # REVERTED: Must use internal hostname for Webpack proxy to work
      - REACT_APP_WS_URL=ws://localhost:8000    # REVERTED: Must use internal hostname
      - NODE_ENV=development
      - CI=false
      - SKIP_PREFLIGHT_CHECK=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - agentic-network
    stdin_open: true
    tty: true

  # Monitoring Dashboard
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: monitoring
    ports:
      - "3001:3001"
    environment:
      - API_URL=http://localhost:8000
      - REDIS_HOST=redis
    depends_on:
      - backend
      - redis
    networks:
      - agentic-network

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=agentic
      - POSTGRES_PASSWORD=agentic123
      - POSTGRES_DB=agentic
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
      - monitoring
    networks:
      - agentic-network

networks:
  agentic-network:
    driver: bridge

volumes:
  ollama_data:
  chroma_data:
  redis_data:
  postgres_data: